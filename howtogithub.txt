==================================
■ gitとGitHubの初期設定 ■

----------------------------------
【gitの初期設定】

1. gitが入っていない環境では sudo apt-get install git-all でインストールできる。（全学計算機システムにはインストール済み）

2. コマンドライン上で以下のようにgitのユーザ名とメールアドレスを設定。

git config --global user.name
git config --global user.email

----------------------------------
【GitHubでのアカウント作成】

1. 以下のページにてアカウントを作成する。無料アカウントの場合、GitHubにアップロードしたファイルはすべて公開になる。有料アカウントの場合、privateに設定することも可能。

https://github.com

----------------------------------
【GitHubと通信するためのssh鍵の登録】

1. ssh鍵を置くディレクトリに cd ~/.ssh で移動。

2. コマンドプロンプトからssh-keygenと入力。

3. Enter file in which to save the keyと聞かれるので、任意のファイル名を指定。たとえばgithub_rsa。Pass phraseを聞かれたら何も入れずにEnter。これによってgithub_rsa（秘密鍵）とgithub_rsa.pub（公開鍵）が作られる。公開鍵は見せてもよいが秘密鍵は自分の所に取っておき、人には見せない。

4. 公開鍵のファイル（拡張子がpubで終わるファイル）の中身をcatで表示。cat ~/.ssh/github_rsa.pubなど。

5. ブラウザで https://github.com/settings/keys を表示し、右上にあるNew SSH keyをクリック。

6. 公開鍵の中身をコピペしてkeyの欄に入力。titleにはアクセス元の環境など、適当な名前を付けた上で、下にあるAdd SSH keyボタンをクリック。

7. ターミナルに戻り、ssh git@github.com。これによってYou've successfully authenticated, but GitHub does not provide shell access.と出れば成功。

==================================
■ 既存のリポジトリを使った作業 ■

----------------------------------
【リモートリポジトリのクローン】

1. 作業用ディレクトリを置くディレクトリ（たとえばホームディレクトリ）にcdで移動。

2. 以下のコマンドでリモートリポジトリからのクローンによってローカルリポジトリを作成する。たとえばrapmという名前のリモートリポジトリをローカルにrapm2という名前でクローンするなら以下。

git clone git@github.com:tarotez/rapm.git rapm2

3. cd rapm2 で移動し、ls -lartでファイルや.gitというディレクトリも作られていることを確認する。

----------------------------------
【ブランチの作成／ファイルの編集／コミット】

1. 以下のコマンドでfeatureという名前のブランチを作る。Switched to a new branch 'feature'と出れば成功。

git checkout -b feature

2. git branchと入力すると現在ローカルに存在するブランチの一覧が表示される。*が付いているのが現在作業中のブランチ。また、git statusでも現在の作業ブランチが分かる。

3. ファイルの編集や追加などを自由に行う。ただし.gitの中身は編集しないこと。

4. git add . で編集済みファイルをすべてstageする。（一部のファイルのみをstageしたい場合、git add filenameでfilenameのみstageできる）。

5. git commit でstageされたファイルをコミットする。git statusですべてコミットされていることを確認できる。

6. git statusでローカルリポジトリ内にあるファイルの編集やコミットの現状を見れる。

7. 以下のように設定し、git graphの出力が見やすくさせる。

git config --global alias.graph "log --graph --date-order --all --pretty=format:'%h %Cred%d %Cgreen%ad %Cblue%cn %Creset%s' --date=short"

8. git graphでこれまでのコミット履歴を表示させる。何回かファイル編集 → git add . → git commit を繰り返してからgit graphで確認せよ。

----------------------------------
【ブランチ間の比較／移動／取り込み】

1. git logで現在までのコミットの一覧が表示される。commitの横に出てくる文字列がコミットハッシュである。

2. たとえばcomhashをコミットハッシュとすると、git show comhashでそのコミットの名前が見れる。コミットハッシュはgit logで表示されたものをコピペすればよい。

3. git diff comhash1 comhash2で2つのコミットの間の差分が表示される。

4. 別のブランチ（たとえばmaster）の内容を現在作業しているブランチと一致させる（マージさせる）にはgit merge masterと入力。競合がある場合、その旨表示されるため、修正を行えばマージできる。

5. 別のブランチ（たとえばmaster）に移る場合はgit chekout masterとすればよい。（-bオプションを付けると新しいブランチが作られるが、付けない場合は単にブランチ間の移動が行われる。

6. ブランチ（たとえばfeature）を取り除くには git branch -d featureとする。

----------------------------------
【リモートリポジトリへのプッシュ】

1. 以下のコマンドでリモートリポジトリtarotez/rapm.gitの内容をローカルにコピーし、originという名前を付ける。

git remote add origin git@github.com:tarotez/rapm.git

2. 以下のようにローカルのfeatureブランチをリモート（origin）のtaroブランチにpushする。（分かりやすいよう、今回はtaroには自分のアカウント名を入れること）。

git push -u origin feature:taro

あるいはローカルとリモートでブランチ名を共にfeatureという名前にする場合は以下でもよい。

git push -u origin feature

----------------------------------
【プルリクエストの作成】

1. ブラウザで https://github.com/tarotez/rapm にアクセスする。

2. 右端のCompare & pull requestボタンをクリック。

3. taroをmasterにマージするのであれば、左上のボタンでbase:masterとcompare:taroになっていることを確認する。

4. Writeというフォームにコミットの理由（なぜ編集を行ったか）を入力。これはリモートリポジトリの管理者にマージの必要性を訴えるために使える。何も入れないのも可。

5. 左下のCreate pull requestボタンをクリック。


==================================
■ 新規リポジトリを作成しての作業 ■

【ローカルリポジトリの新規作成】

1. 好きな場所に作業ディレクトリを作る。たとえばmkdir rapm。

2. cd rapmで作業ディレクトリ内に移動。

3. git initでローカルリポジトリ作成。ls -lartで.gitというディレクトリが作られていることを確認。

4. このディレクトリの中に任意のファイルを作っておいておく。

5. git statusで現状を確認。

6. git add . でstageする。

7. git commitでコミットする。

----------------------------------
【GitHub上で新規リモートリポジトリの作成】

1. githubの自分のアカウントのページから右上の「+」をクリックし、New repositoryを選択。

2. Repository nameを入力し、必要であればDescriptionに記入した上で一番下のCreate repositoryをクリック。

3. 表示される以下のコードをターミナル上にコピペすれば自分のローカルリポジトリの内容がリモートリポジトリにコピーされる。

git remote add origin git@github.com:tarotez/rap.git
git push -u origin master

----------------------------------
【ローカルリポジトリへのフェッチとマージ】

1. git fetchでリモートリポジトリの編集履歴をローカルに移してくる。

2. git merge origin/masterによって現在作業しているブランチを（originと名付けた）ローカルにコピーされたリモートリポジトリのブランチと一致させる。競合が発生した場合はその旨表示されるので、自分のファイルの方を修正し、再度git add, git commitを行った上でgit mergeするとよい。

なお、git fetchとgit mergeはgit pullというコマンドで一括して行うこともできる。これを行うことを他の開発者に依頼するのがpull requestである。

----------------------------------
【リモートリポジトリにおけるマージ】

リモートリポジトリの所有者（owner）と協力者（collaborator）はpull requestを受け取ると、追加されたブランチをmasterブランチにマージできる。

1. Merge pull requestボタンをクリック。

2. Confirm mergeボタンをクリック。

3. Delete branchボタンを押して不要なブランチを削除。



